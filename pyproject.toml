[project]
name = "image-matcher"
version = "0.1.0"
description = "Historical book illustration matcher using IIIF images from e-rara"
authors = [
    {name = "BoiMat", email = "matteo.boi@unibe.ch"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"  # Changed from >=3.8 to >=3.10
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",  # Updated minimum version
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["image-matching", "computer-vision", "iiif", "digital-humanities", "e-rara"]

dependencies = [
    # Core Python libraries
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    "urllib3>=2.0.0",
    
    # Computer Vision and Image Processing
    "opencv-python>=4.8.0",
    "Pillow>=10.0.0",
    "numpy>=1.24.0",
    
    # Deep Learning and PyTorch
    "torch>=2.2.0",
    "torchvision>=0.15.0",
    
    # Progress bars and parallel processing
    "tqdm>=4.65.0",
    
    # Remove the argparse-dataclass line since it's not needed for Python >=3.10
    
    # Scientific computing and utilities
    "scipy>=1.10.0",
    "scikit-image>=0.21.0",
    "matplotlib>=3.7.0",
    # Additional image processing utilities
    "imageio>=2.31.0",
    "kornia>=0.7.0",
      # Image matching models (installed from git via uv.sources)
    "image-matching-models",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

gpu = [
    "torch>=2.2.0",
    "torchvision>=0.15.0",
]

jupyter = [
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
    "ipywidgets>=8.1.0",
    "notebook>=7.0.0",
]

all = [
    "image-matcher[dev,gpu,jupyter]"
]

[project.urls]
Homepage = "https://github.com/BoiMat/image_matcher.git"
Repository = "https://github.com/BoiMat/image_matcher.git"
Documentation = "https://github.com/BoiMat/image_matcher.git#readme"
"Bug Reports" = "https://github.com/BoiMat/image_matcher.git/issues"

[project.scripts]
image-matcher = "e_rara_image_downloader:main"
image-matcher-gui = "gui_app:main"

[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["."]

# Install the image-matching-models library from git
[tool.uv.sources]
image-matching-models = { git = "https://github.com/alexstoken/image-matching-models.git" }

# Optional CUDA sources for GPU support
torch = [
  { index = "pytorch-cu124", marker = "extra == 'gpu' and (sys_platform == 'linux' or sys_platform == 'win32')" },
]
torchvision = [
  { index = "pytorch-cu124", marker = "extra == 'gpu' and (sys_platform == 'linux' or sys_platform == 'win32')" },
]

[[tool.uv.index]]
name = "pytorch-cu124"
url = "https://download.pytorch.org/whl/cu124"
explicit = true

[tool.black]
line-length = 120
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 120
known_first_party = ["image_matcher"]
known_third_party = ["cv2", "numpy", "torch", "PIL", "requests", "tqdm", "matching"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "matching.*",
    "kornia.*",
    "scipy.*",
    "skimage.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
